video_processing_toolkit
========================

.. py:module:: video_processing_toolkit

.. autoapi-nested-parse::

   Top-level package for Video Processing Toolkit.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/video_processing_toolkit/video_cutting/index
   /autoapi/video_processing_toolkit/video_processing/index




Package Contents
----------------

.. py:function:: get_frame_types(video_file)

   Function to extract the type of each frame in a video using ffprobe.
   The frame types are typically:
   - 'I' (Intra-coded): A full image
   - 'P'(Predicted): Stores only the difference from the previous frame
   - 'B' (Bidirectional): Stores differences using both previous and next frames.

   :param video_file: Path to the input video file.
   :type video_file: str

   :returns:

             A zip object containing tuples of (frame_index, frame_type),
                  where frame_index is an integer and frame_type is a string ('I', 'P', 'B').
   :rtype: Zip


.. py:function:: save_all_i_keyframes(video_file, path_out)

   Function to extract and save all I-frames of a complete video as image files.

   :param video_file: Path to the input video file
   :type video_file: str
   :param path_out: Directory where the extracted frames will be saved.
   :type path_out: str

   :returns: None


.. py:function:: save_all_i_keyframes_between_two_timestamps(video_file, path_out, hh_mm_ss_start, hh_mm_ss_end)

   Function to extract and save all the I-frames of a complete video as image files between two timestamps.

   :param video_file: Path to the input video file
   :type video_file: str
   :param path_out: The output folder to save all the output frames
   :type path_out: str
   :param hh_mm_ss_start: the time starting time stamp
   :type hh_mm_ss_start: str
   :param hh_mm_ss_end: the time ending time stamp.
   :type hh_mm_ss_end: str

   :returns: None


.. py:function:: save_all_p_keyframes(video_file, path_out)

   Function to extract all P-frames from a complete video as image files.

   :param video_file: Path to the input video file
   :type video_file: str
   :param path_out: Directory where the extracted frames will be saved.
   :type path_out: str

   :returns: None


.. py:function:: save_all_p_keyframes_between_two_timestamps(video_file, path_out, hh_mm_ss_start, hh_mm_ss_end)

   Function to extract  and save all the p-key frames of a complete video.

   :param video_file: Path to the input video file
   :type video_file: str
   :param path_out: Directory where the extracted frames will be saved
   :type path_out: str
   :param hh_mm_ss_start: the time starting time stamp
   :type hh_mm_ss_start: str
   :param hh_mm_ss_end: the time ending time stamp.
   :type hh_mm_ss_end: str

   :returns: None


.. py:function:: convert_video(inputed_file)

   Function to convert the video file into .avi format and save it into current project directory.

   :param inputed_file: Path of the input video file.
   :type inputed_file: str

   :returns: The name of the output video file, which automatically takes the name from current time and save the
             file into current project folder.
   :rtype: str


.. py:function:: compute_frame_per_sec_rate(video_file: str) -> float

   Compute the framerate (frames per second) of the video using OpenCV.

   :param video_file: Path to the video file.
   :type video_file: str

   :returns: The framerate of the video.
   :rtype: float


.. py:function:: frames_to_video(input_path, output_path, fps)

   Function reads all the individual frames, saved in a directory and then use them to create a video.

   :param input_path: Path of the directory where the images or frames are saved
   :type input_path: str
   :param fps: The Frame rate of the created video stream
   :type fps: int
   :param output_path: The path where the constructed video will be saved.
   :type output_path: str

   :returns: None


.. py:function:: video_to_all_frames(input_loc, output_loc)

   Function to extract all the frames from input video file and save them as separate frames in an output directory.

   :param input_loc: Path to the input video file
   :type input_loc: str
   :param output_loc: Directory where the frames will be saved.
   :type output_loc: str

   :returns: None


.. py:function:: extract_images_regular_interval(path_in, path_out, time_interval_in_sec)

   Function to extract the frames in every given "time_interval" e.g. 1 sec, 5 sec etc. from input video file
   and save them as separate frames in an output directory.

   :param path_in: Input video file
   :type path_in: str
   :param path_out: Directory where the extracted frames will be saved
   :type path_out: str
   :param time_interval_in_sec: the time interval of the sampling, mention in seconds; we convert it into milliseconds.
   :type time_interval_in_sec: int

   :returns: None

   Resources:
          https://www.futurelearn.com/info/courses/introduction-to-image-analysis-for-plant-phenotyping/0/steps/305359


.. py:function:: extract_images_at_particular_timestamp(path_in, path_out, hh_mm_ss)

   Function to extract the frame at a particular time stamp; Need to know the number of frames per second and the
   timestamp in the video , we want to take frame from, we can easily calculate the frame number we want.

   :param path_in: Input video file
   :type path_in: str
   :param path_out: Directory where the extracted frame will be saved
   :type path_out: str
   :param hh_mm_ss: The timestamp in "HH:MM:SS" format where the frame should be extracted.
   :type hh_mm_ss: str

   :returns: None


.. py:function:: extract_images_between_two_timestamps(path_in, path_out, hh_mm_ss_start, hh_mm_ss_end)

   Function to extract all the frames within two timestamps; Need to know the number of frames per second and the
   start and end timestamp in the video.

   :param path_in: Path to the input video file
   :type path_in: str
   :param path_out: Directory where the extracted frames will be saved
   :type path_out: str
   :param hh_mm_ss_start: The start timestamp in "HH:MM:SS" format
   :type hh_mm_ss_start: str
   :param hh_mm_ss_end: The end timestamp in "HH:MM:SS" format.
   :type hh_mm_ss_end: str

   :returns: None


.. py:function:: extract_regular_interval_images_between_two_timestamps(path_in, path_out, hh_mm_ss_start, hh_mm_ss_end, time_interval_in_sec)

   Function to extract frames after given regular intervals within two timestamps; Need to know the number of
   frames per second and the start and end timestamp in the video.

   :param path_in: Path to the input video file
   :type path_in: str
   :param path_out: Directory where the extracted frames will be saved
   :type path_out: str
   :param hh_mm_ss_start: The start timestamp in "HH:MM:SS" format
   :type hh_mm_ss_start: str
   :param hh_mm_ss_end: The end timestamp in "HH:MM:SS" format
   :type hh_mm_ss_end: str
   :param time_interval_in_sec: The time interval (in seconds) between each frame extraction.
   :type time_interval_in_sec: int

   :returns: None


.. py:function:: process_input_video_give_video_output(input_loc, output_loc, function_to_apply)

   Function to apply the processing on each frames from input video file and create another video.

   :param input_loc: Input video file
   :param output_loc: The path of output video file
   :param function_to_apply: The function in which the processing will be applied. Remember, this function should
   :param take opencv frame i.e. a numpy array:
   :type take opencv frame i.e. a numpy array: nd.array

   Example usage :
       process_input_video_give_video_output("input_video_path", "output_video_path",
       handlle_nils_field_segmentation)
   :returns: None


.. py:function:: compute_frame_per_sec_rate(video_file: str) -> float

   Compute the framerate (frames per second) of the video using OpenCV.

   :param video_file: Path to the video file.
   :type video_file: str

   :returns: The framerate of the video.
   :rtype: float


.. py:function:: get_clip(input_filename, output_filename, start_time, end_time)

   Cuts a video using ffmpeg while preserving the original framerate and
   forcing one I-frame per second for clean frame extraction.

   :param input_filename: Path to the input video.
   :type input_filename: str
   :param output_filename: Path to save the output video.
   :type output_filename: str
   :param start_time: Start time in seconds.
   :type start_time: float
   :param end_time: End time in seconds.
   :type end_time: float


.. py:function:: cut_video_clips(input_filename, output_file_path, time_stamp_start_1, time_stamp_end_1)

   Function to read several start and end time stamps, mentioned in two vectors; "time_stamp_start_1" and
   "time_stamp_end_1", to crop the video clips based on these start and end time stamps.

   :param input_filename: Path of the input video file
   :type input_filename: str
   :param output_file_path: The path of the output file clip
   :type output_file_path: str
   :param time_stamp_start_1: The list of start time in HH:MM:SS format
   :type time_stamp_start_1: List[str]
   :param time_stamp_end_1: The list of end time in HH:MM:SS format.
   :type time_stamp_end_1: List[str]

   :returns: None


